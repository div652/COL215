
library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_Std.all;

entity lightDisplay is 
	Port ( 
    		Number : in std_logic_vector(15 downto 0);
    		Clk : in std_logic;
            LED : out std_logic_vector(6 downto 0);
           anode : out STD_LOGIC_Vector(3 downto 0));
end lightDisplay;

architecture structure of lightDisplay is 
	component singleDisplay 
    		 Port ( A : in STD_LOGIC;
           B : in STD_LOGIC;
           C : in STD_LOGIC;
           D : in STD_LOGIC;

           light_num : in integer;
           LED : out std_logic_vector(6 downto 0);
           anode : out STD_LOGIC_Vector(3 downto 0));
end component singleDisplay;
	
    signal 	light_num : integer; 
    signal  digit_A : std_logic;
    signal digit_B : std_logic;
    signal digit_C : std_logic; 
    signal digit_D : std_logic; 
    signal counter  : integer :=0;
    signal counter_new : integer := 0 ; 
    signal counter_2 : integer := 0 ;
    signal Sampled_number : std_logic_vector(15 downto 0);
    signal state : integer :=0 ; 
   
    
    begin 
    	process(clk)  
    	  variable useless :std_logic:='0' ;
          
        	begin 
            
            		
               if(Clk'event  and rising_Edge(clk)) then 
                    counter<= ((counter+1)) ;
                    
                    counter_new<= ((counter) / 400000) mod 4  ;
                    state <= ((counter)/400000) mod 640 ; 
                    counter_2 <= ((counter/20000)mod 20) ;
                    end if ; 
                    
           
    
               		case (counter_new) is 
                    	when 0 => digit_A<=Sampled_Number(15);digit_B<=Sampled_Number(14);digit_C<=Sampled_Number(13);digit_D<=Sampled_Number(12);light_num<=((state/160) mod 4) ;
                        
                        when 1 =>  if(counter_2<10) then digit_A<=Sampled_Number(11);digit_B<=Sampled_Number(10);digit_C<=Sampled_Number(9);digit_D<=Sampled_Number(8);light_num<=(((state/160) + 1) mod 4) ;else light_num<=4;end if;
                        when 2 =>  if(counter_2<5) then digit_A<=Sampled_Number(7);digit_B<=Sampled_Number(6);digit_C<=Sampled_Number(5);digit_D<=Sampled_Number(4);light_num<=(((state/160) + 2) mod 4 ) ; else light_num<=4;end if;
                        when others =>   if(counter_2<2) then digit_A<=Sampled_Number(3);digit_B<=Sampled_Number(2);digit_C<=Sampled_Number(1);digit_D<=Sampled_Number(0);light_num<=(((state/160) + 3) mod 4) ;else light_num<=4;end if;
                        end case;
                    
            end process;
            
            process(state) 
            begin if(state = 0) then Sampled_number<=Number ; end if; 
            end process;
            
         
	Single_display: entity work.singleDisplay(Design_arch) port map(digit_A , digit_B, digit_C , digit_D ,light_num , LED ,anode);
        
    
    end structure;
